apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: taiga-async-rabbitmq  
  name: taiga-async-rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: taiga-async-rabbitmq  
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        app: taiga-async-rabbitmq  
      creationTimestamp: null
      labels:
        app: taiga-async-rabbitmq  
    spec:
      containers:
      - env:
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            configMapKeyRef:
              key: RABBITMQ_DEFAULT_PASS
              name: variables-env
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            configMapKeyRef:
              key: RABBITMQ_DEFAULT_USER
              name: variables-env
        - name: RABBITMQ_DEFAULT_VHOST
          valueFrom:
            configMapKeyRef:
              key: RABBITMQ_DEFAULT_VHOST
              name: variables-env
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            configMapKeyRef:
              key: RABBITMQ_ERLANG_COOKIE
              name: variables-env
        image: rabbitmq:3-management-alpine
        name: taiga-async-rabbitmq 
        imagePullPolicy: ""
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/rabbitmq
          name: taiga-async-rabbitmq-data
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: taiga-async-rabbitmq-data
        persistentVolumeClaim:
          claimName: taiga-async-rabbitmq-data
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: taiga-async-rabbitmq  
  name: taiga-async-rabbitmq
spec:
  ports:
  - name: "5672"
    port: 5672
    protocol: TCP
    targetPort: 5672
  selector:
    app: taiga-async-rabbitmq  